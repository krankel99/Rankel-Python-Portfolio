# -*- coding: utf-8 -*-
"""EoC2 Week 2_2 1_23_IN-CLASS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zpTn1AM9pIH2_Ha7AE3ben713_6us2P

# Introduction to Testing in Python

## Why Test Code?
- Testing ensures your code behaves as expected.
- It helps you catch errors early, saving time in debugging.
- Good testing improves code quality and makes collaboration easier.

## Types of Tests
- **Unit Tests**: Test individual functions or methods.
- **Integration Tests**: Test how components work together.
- **End-to-End Tests**: Simulate user interactions in a full application.

## What Will You Learn Today?
1. How to write and run tests using Pythonâ€™s `pytest`.
2. How to handle edge cases through testing.
3. How to collaborate to design and implement new tests.

Let's start by writing a small program and testing it.
"""

# Starter Code: DataAnalyzer Class
import statistics

class DataAnalyzer:
    def __init__(self, data):
        """
        Initializes the DataAnalyzer with a list of numeric values.
        """
        self.data = data
    def mean(self):
        """Calculates the mean of the numeric data."""
        return statistics.mean(self.data)

test_data=DataAnalyzer([3,4,5])
test_data.mean()

"""## Writing Your First Test

Testing in Python often uses the `pytest` library. Let's write our first test for the `mean` method in the `DataAnalyzer` class.

- **Arrange**: Set up the input data.
- **Act**: Call the function you want to test.
- **Assert**: Verify that the result matches your expectations.
"""

# First Test: test_mean
def test_mean(data_list, mean_value):
  analyzer=DataAnalyzer(data_list)
  assert analyzer.mean() == mean_value

# Run the test
try:
  test_mean([85, 90, 95], 91)
  print('test_mean passed successfuully!')
except AssertionError:
  print('test_mean failed')

"""## Adding `median` and `mode` Methods

Now, let's extend the `DataAnalyzer` class by adding a method to calculate the median.
Afterward, we will write a new test for this method.
"""

# Modify DataAnalyzer: Add median method
class DataAnalyzer:
    def __init__(self, data):
        self.data = data

    def mean(self):
      return statistics.mean(self.data)

    def median(self):
        """Calculates the median of the numeric data."""
        return statistics.median(self.data)

    def mode(self):
        """Calculates the median of the numeric data."""
        return statistics.mode(self.data)


# Create test function for median
def test_median(data_list, median_value):
  analyzer=DataAnalyzer(data_list)
  assert analyzer.median() == median_value

# Create test function for mode
def test_mode(data_list, mode_value):
  analyzer=DataAnalyzer(data_list)
  assert analyzer.mode() == mode_value


# Run test functions
try:
  test_median([85, 90, 95], 90)
  print('test_median passed successfuully!')
except AssertionError:
  print('test_median failed')

try:
  test_mode([85, 90, 95], 85)
  print('test_mode passed successfuully!')
except AssertionError:
  print('test_mode failed')

"""## Investigating Edge Cases

What happens if:
1. The list of numbers is empty?
2. The list contains non-numeric data?

Let's write two new test functions to handle these scenarios:
- **test_empty_list**
- **test_non_numeric_data**
"""

empty_list = []
DataAnalyzer(empty_list).mean() # Trying to run an empty list leads to a StatisticsError

non_num_list = ["a", "b", "c"]
DataAnalyzer(non_num_list).mean() # Trying to run an empty list leads to a TypeError

"""#### `test_empty_list`
- **Purpose**: Ensures the `mean` method raises an error when called with an empty list.
- **Key Points**:
  - An empty list cannot have a mean, so the method should raise an error.
  - Uses `pytest.raises` to check for `statistics.StatisticsError`.
"""

import pytest

def test_empty_list(data_list):
  analyzer=DataAnalyzer(data_list)
  with pytest.raises(statistics.StatisticsError):
    analyzer.mean()

try:
  test_empty_list([])
  print('test_empty_list passed successfuully!')
except AssertionError:
  print('test_empty_list failed')

"""#### `test_non_numeric_data`
- **Purpose**: Verifies that the `mean` method raises a `TypeError` when non-numeric data is provided.
- **Key Points**:
  - The `sum` function cannot handle non-numeric values.
  - This test ensures invalid input is handled explicitly.
"""

def test_non_numeric_data(data_list):
  analyzer=DataAnalyzer(data_list)
  with pytest.raises(TypeError):
    analyzer.mean()

try:
  test_non_numeric_data(['a', 'b'])
  print('test_non_numeric_data passed successfuully!')
except AssertionError:
  print('test_non_numeric_data failed')

"""## Final Challenge Instructions: Rewriting the DataAnalyzer Class
For the final challenge, you will modify the `DataAnalyzer` class to calculate the mean, median, and mode manually without using any functions from the statistics library.

**Instructions**
1. Re-Write the `mean` Method
    * Manually calculate the mean using a `for loop` to sum the values in the list.
    * Avoid using the `sum` function.
    * Round to 1 decimal

2. Re-Write the median Method
    * Manually calculate the median by:
        * Sorting the list.
        * Finding the middle value if the list has an odd number of elements.
        * Averaging the two middle values if the list has an even number of elements.

3. Re-Write the mode Method
    * Manually calculate the mode by:
        * Counting the frequency of each number in the list using a dictionary.
        * Identifying the number with the highest frequency.

4. Test Your Implementation
    * Use the provided test functions (test_mean, test_median, test_mode) to verify your manual implementations work correctly.
    * Run your tests using pytest or manually in the notebook.
"""

class DataAnalyzer:
    def __init__(self, data):
        """
        Initializes the DataAnalyzer with a list of numeric values.
        """


    def mean(self):
        """Manually calculates the mean of the numeric data."""


    def median(self):
        """Manually calculates the median of the numeric data."""


    def mode(self):
        """Manually calculates the mode of the numeric data."""

# First Test: test_mean
def test_mean(data_list, mean_value):


# Create test function for median
def test_median(data_list, median_value):


# Create test function for mode
def test_mode(data_list, mode_value):


# Run test functions